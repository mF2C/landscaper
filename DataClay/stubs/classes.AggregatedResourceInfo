# dataClay header
# This is a Stub, to be used for the user client
from dataclay import dclayMethod, DataClayObject

# Imports required by the following class

# Definition of dataClay object class: AggregatedResourceInfo
class AggregatedResourceInfo(DataClayObject):

    @dclayMethod(obj='anything', property_name='str', value='anything', beforeUpdate='str', afterUpdate='str')
    def __setUpdate__(self, obj, property_name, value, beforeUpdate, afterUpdate):
        if beforeUpdate is not None:
            getattr(self, beforeUpdate)(property_name, value)
        object.__setattr__(obj, "%s%s" % ("_dataclay_property_", property_name), value)
        if afterUpdate is not None:
            getattr(self, afterUpdate)(property_name, value)
    @dclayMethod(agent="model_mf2c.classes.Agent")
    def __init__(self, agent):
        self.agent = agent
        self.calculate_aggregation()
    @dclayMethod()
    def calculate_aggregation(self):
        """Update own properties (to be defined).

        This takes info from the agent (device, children, other aggregated info)
        """
        pass
    pass
# End of class definition
