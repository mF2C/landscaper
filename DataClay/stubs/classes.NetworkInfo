# dataClay header
# This is a Stub, to be used for the user client
from dataclay import dclayMethod, DataClayObject

# Imports required by the following class

# Definition of dataClay object class: NetworkInfo
class NetworkInfo(DataClayObject):

    @dclayMethod(io="str", eth_info="str", eth_address="str", wifi_info="str", wifi_address="str", bandwidth ="str", standard="str")
    def __init__(self, io, eth_info, eth_address, wifi_info, wifi_address, bandwidth, standard):
        self.network_io = io
        self.ethernet_info = eth_info
        self.ethernet_address = eth_address
        self.wifi_info = wifi_info
        self.wifi_address = wifi_address
        self.bandwidth_capacity = bandwidth
        self.standard_info = standard
    @dclayMethod(return_="dict")
    def to_dict(self):
        fields = [
            "network_io",
            "ethernet_info",
            "ethernet_address",
            "wifi_info",
            "wifi_address",
            "bandwidth_capacity",
            "standard_info"
        ]
        return self._to_dict(fields)
    @dclayMethod(obj='anything', property_name='str', value='anything', beforeUpdate='str', afterUpdate='str')
    def __setUpdate__(self, obj, property_name, value, beforeUpdate, afterUpdate):
        if beforeUpdate is not None:
            getattr(self, beforeUpdate)(property_name, value)
        object.__setattr__(obj, "%s%s" % ("_dataclay_property_", property_name), value)
        if afterUpdate is not None:
            getattr(self, afterUpdate)(property_name, value)
    @dclayMethod(fields="list<str>", return_="dict")
    def _to_dict(self, fields):
        return {field: self.__getattribute__(field) for field in fields}
    pass
# End of class definition
