# dataClay header
# This is a Stub, to be used for the user client
from dataclay import dclayMethod, DataClayObject

# Imports required by the following class

# Definition of dataClay object class: User
class User(DataClayObject):

    @dclayMethod(obj='anything', property_name='str', value='anything', beforeUpdate='str', afterUpdate='str')
    def __setUpdate__(self, obj, property_name, value, beforeUpdate, afterUpdate):
        if beforeUpdate is not None:
            getattr(self, beforeUpdate)(property_name, value)
        object.__setattr__(obj, "%s%s" % ("_dataclay_property_", property_name), value)
        if afterUpdate is not None:
            getattr(self, afterUpdate)(property_name, value)
    @dclayMethod(user_id="str", email="str", name="str")
    def __init__(self, user_id, email, name):
        self.id_key = user_id
        self.email = email
        self.name = name
        self.service_consumer = False
        self.resource_contributor = False
        self.allowed_services = []
    @dclayMethod(return_="dict")
    def get_user_profile(self):
        fields = ["id_key", "email", "name", "service_consumer", "resource_contributor"]
        return self._to_dict(fields)
    @dclayMethod(fields="list<str>", return_="dict")
    def _to_dict(self, fields):
        return {field: self.__getattribute__(field) for field in fields}
    pass
# End of class definition
